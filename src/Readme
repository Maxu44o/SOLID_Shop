Программа умеет создавать Пользователей - покупателей и сотрудников.
Покупатель умеет покупать товары. Может выбрать из какого "склада" их заказать.
На складе Depot количество товаров не ограничено. В PostPoint они могут закончится, их туда привозит сотрудник.
Покупатель открывает корзину, может добавить туда товары и завершить покупку.
Стоимость доставки зависит от веса товара и типа склада.
Скидка зависти от времени покупки.



MAGICS - в каждом продукте свои константы.

1) Single-responsibility principle
Пользователи разделены на свои классы. В отдельный класс вынесен билдер и генератор id покупателей
(он в этой релизации программы не нужен конечно, просто изначально задумывался другой функционал с ведением архива заказов по покупателям,
и разного требования к заполнености полей объектов покупателей при обращении к складу и постамату, эти функии я написать не успел, а генератор остался).
В пакете Cart классы логически разделены для хранения необходимых данных и выполнение простых функций.
Для выполнения насыщенной информацией функии собраны в классе Order.

2) Open-closed principle
Применение наследования в пакете Product - основные поля в классе Product, уникальные дополнительные у наследников.
Можно добавлять новые типы продуктов без изменениея классов в других пакетах. Применение интерфейсов Discountable и Deliverable.


3) Liskov substitution principle
Наследование в Person и Product логично, наследники расширяют функционал предков.

4) Interface segregation principle
Интерфейсы в пакете Product разделены по функциям. Интерфейс Supplying напртив получился раздутым для соблюдения "контракта", см. п.5

5) Dependency inversion principle
В конструктор объект класса Cart передаем интерфейс а не объект.
